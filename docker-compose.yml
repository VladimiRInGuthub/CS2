version: '3.8'

services:
  # Base de données MongoDB
  mongodb:
    image: mongo:7.0
    container_name: skincase-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: skincase
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - skincase-network

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    container_name: skincase-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - skincase-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: skincase-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/skincase?authSource=admin
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: dev_secret_change_me_in_production
      FRONTEND_URL: http://localhost:3000
      BACKEND_URL: http://localhost:5000
      # Clés API optionnelles
      STEAM_API_KEY: ${STEAM_API_KEY:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      CSGOSKINS_API_KEY: ${CSGOSKINS_API_KEY:-}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - skincase-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React (pour le développement)
  frontend:
    build:
      context: ./cs2-frontend
      dockerfile: Dockerfile.dev
    container_name: skincase-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_CSGOSKINS_API_KEY: ${CSGOSKINS_API_KEY:-}
    ports:
      - "3000:3000"
    volumes:
      - ./cs2-frontend/src:/app/src
      - ./cs2-frontend/public:/app/public
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - skincase-network

  # Nginx (reverse proxy pour la production)
  nginx:
    image: nginx:alpine
    container_name: skincase-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./cs2-frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - skincase-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  skincase-network:
    driver: bridge
